{"version":3,"sources":["component/card/card.component.js","component/card-list/card-list.component.js","component/search-box/search-boc.component.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","user","id","name","email","CardList","map","key","SearchField","type","placeholder","onChange","OnChangeSearchField","App","e","setState","searchField","target","value","console","log","state","card","fetch","then","res","json","this","filterdUser","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+UAaeA,G,kBAXF,SAAAC,GAAK,OAChB,yBAAKC,UAAU,kBACb,yBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,KAAKC,GAArC,4BAEL,4BAAKL,EAAMI,KAAKE,MAChB,2BAAIN,EAAMI,KAAKG,UCLNC,EAAW,SAAAR,GACtB,OACE,yBAAKC,UAAU,aACZD,EAAMI,KAAKK,KAAI,SAAAL,GAAI,OAClB,kBAAC,EAAD,CAAMM,IAAKN,EAAKC,GAAID,KAAMA,SCKnBO,G,MAXK,SAACX,GACnB,OACE,2BACEY,KAAK,SACLX,UAAU,SACVY,YAAY,kBACZC,SAAUd,EAAMe,wBCqCPC,E,YAvCb,aAAe,IAAD,8BACZ,+CAcFD,oBAAsB,SAAAE,GACpB,EAAKC,SAAS,CACZC,YAAaF,EAAEG,OAAOC,SAfxBC,QAAQC,IAAR,gBACA,EAAKC,MAAQ,CACXC,KAAM,GACNN,YAAa,IALH,E,iFASO,IAAD,OAClBO,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAvB,GAAI,OAAI,EAAKc,SAAS,CAAEO,KAAMrB,S,+BAU9B,IAAD,EACuB0B,KAAKN,MAA3BL,EADD,EACCA,YAEFY,EAHC,EACcN,KAEIO,QAAO,SAAA5B,GAAI,OAClCA,EAAKE,KAAK2B,cAAcC,SAASf,MAGnC,OACE,yBAAKlB,UAAU,OACb,yCACA,kBAAC,EAAD,CAAac,oBAAqBe,KAAKf,sBACvC,kBAAC,EAAD,CAAUX,KAAM2B,S,GAlCNI,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.cde1d63e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.style.css\";\nconst Card = props => (\n  <div className=\"card-container\">\n    <img\n      alt=\"monstar\"\n      src={`https://robohash.org/${props.user.id}?set=set2&size=180x180`}\n    />\n    <h2>{props.user.name}</h2>\n    <p>{props.user.email}</p>\n  </div>\n);\n\nexport default Card;\n","import React from \"react\";\nimport \"./card-list.style.css\";\nimport Card from \"../card/card.component\";\n\nexport const CardList = props => {\n  return (\n    <div className=\"card-list\">\n      {props.user.map(user => (\n        <Card key={user.id} user={user} />\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./search-box.style.css\"\nconst SearchField = (props ) => {\n  return (\n    <input\n      type=\"search\"\n      className=\"search\"\n      placeholder=\"Search users...\"\n      onChange={props.OnChangeSearchField}\n    />\n  );\n};\n\nexport default SearchField;\n","import React from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./component/card-list/card-list.component\";\nimport SearchField from \"./component/search-box/search-boc.component\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    console.log(this);\n    this.state = {\n      card: [],\n      searchField: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(res => res.json())\n      .then(user => this.setState({ card: user }));\n  }\n\n  OnChangeSearchField = e => {\n    this.setState({\n      searchField: e.target.value\n    });\n  };\n\n\n  render() {\n    const { searchField, card } = this.state;\n\n    const filterdUser = card.filter(user =>\n      user.name.toLowerCase().includes(searchField)\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Rebot App</h1>\n        <SearchField OnChangeSearchField={this.OnChangeSearchField} />\n        <CardList user={filterdUser} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}